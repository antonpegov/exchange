{"version":3,"sources":["state/models/exchange-mode.ts","utils/toast.helper.tsx","store.ts","state/actions/exchange.actions.ts","state/reducers/exchange.reducer.ts","state/actions/wallet.actions.ts","state/reducers/wallet.reducer.ts","state/epics/exchange.epics.ts","utils/test-id-builder.helper.ts","utils/http.ts","api.ts","state/epics/wallet.epics.ts","shared/components/Panel.tsx","shared/components/Title.tsx","shared/components/Container.tsx","shared/components/ButtonsWraper.tsx","containers/exchange/Exchange.component.tsx","state/selectors/wallet.selectors.ts","components/WalletRow/WalletRow.component.tsx","containers/wallet/Wallet.component.tsx","App.tsx","index.tsx","state/models/currencies.ts","state/models/index.ts"],"names":["ExchangeMode","useSnackbarRef","history","exchangeActions","init","createAction","rates","initialExchangeState","activeCurrency","Currency","EUR","exchangeReducer","createReducer","handleAction","state","payload","base","walletActions","resetBalances","runExchange","initialBalances","USD","GBP","PLN","initialwalletState","balances","currencies","walletReducer","actions","success","msg","options","this","toast","variant","warning","info","error","enqueueSnackbar","exchangeEpics","combineEpics","action$","pipe","filter","isActionOf","tap","ignoreElements","testIdBuilder","baseName","names","reduce","prev","curr","instance","Api","baseCurrency","config","params","symbols","headers","axios","create","get","map","response","data","walletEpics","switchMap","epicMiddleware","createEpicMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createBrowserHistory","rootEpic","store","createStore","combineReducers","router","connectRouter","wallet","exchange","applyMiddleware","run","Panel","styled","Paper","Title","h2","Container","BaseContainer","ButtonsWraper","div","test","Exchange","data-testid","BUY","getWalletState","getBalances","createSelector","getCurrencies","ExchangeButton","IconButton","Wrapper","WalletRow","balance","currency","onExchangeClick","onClick","componentId","Balances","FullWidthButton","Button","Wallet","dispatch","useDispatch","useSelector","index","color","className","exact","path","component","ReactDOM","render","StrictMode","maxSnack","anchorOrigin","vertical","horizontal","document","getElementById"],"mappings":"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","file":"static/js/main.165034f3.chunk.js","sourcesContent":["export enum ExchangeMode {\r\n  SELL = 'Sell',\r\n  BUY = 'Buy'\r\n}","import React from 'react'\r\nimport { useSnackbar, WithSnackbarProps } from 'notistack'\r\n\r\ninterface IProps {\r\n  setUseSnackbarRef: (showSnackbar: WithSnackbarProps) => void\r\n}\r\n\r\ntype OptionsObject = {\r\n  [key: string]: string\r\n}\r\n\r\nconst InnerSnackbarUtilsConfigurator: React.FC<IProps> = (props: IProps) => {\r\n  props.setUseSnackbarRef(useSnackbar())\r\n  return null\r\n}\r\n\r\nlet useSnackbarRef: WithSnackbarProps\r\nconst setUseSnackbarRef = (useSnackbarRefProp: WithSnackbarProps) => {\r\n  useSnackbarRef = useSnackbarRefProp\r\n}\r\n\r\nexport const SnackbarUtilsConfigurator = () => {\r\n  return <InnerSnackbarUtilsConfigurator setUseSnackbarRef={setUseSnackbarRef} />\r\n}\r\n\r\nexport default {\r\n  success(msg: string, options: OptionsObject = {}) {\r\n    this.toast(msg, { ...options, variant: 'success' })\r\n  },\r\n  warning(msg: string, options: OptionsObject = {}) {\r\n    this.toast(msg, { ...options, variant: 'warning' })\r\n  },\r\n  info(msg: string, options: OptionsObject = {}) {\r\n    this.toast(msg, { ...options, variant: 'info' })\r\n  },\r\n  error(msg: string, options: OptionsObject = {}) {\r\n    this.toast(msg, { ...options, variant: 'error' })\r\n  },\r\n  toast(msg: string, options: OptionsObject = {}) {\r\n    useSnackbarRef.enqueueSnackbar(msg, options)\r\n  },\r\n}\r\n","import { connectRouter } from 'connected-react-router'\r\nimport { createBrowserHistory} from 'history'\r\nimport { combineEpics, createEpicMiddleware } from 'redux-observable'\r\nimport { combineReducers, compose, createStore, applyMiddleware } from 'redux'\r\n\r\nimport { exchangeReducer } from 'state/reducers/exchange.reducer'\r\nimport { walletReducer } from 'state/reducers/wallet.reducer'\r\nimport { exchangeEpics } from 'state/epics/exchange.epics'\r\nimport { walletEpics } from 'state/epics/wallet.epics'\r\n\r\ndeclare global {  \r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: <R>(a: R) => R\r\n  }\r\n}\r\n\r\nexport type RootState = NonNullable<Parameters<typeof rootReducer>[0]>\r\n\r\nconst epicMiddleware = createEpicMiddleware()\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nexport const rootEpic = combineEpics(\r\n  exchangeEpics,\r\n  walletEpics,\r\n)\r\n\r\nexport const rootReducer = (history: any) => combineReducers({\r\n  router: connectRouter(history),\r\n  wallet: walletReducer,\r\n  exchange: exchangeReducer,\r\n})\r\n\r\nexport const store = createStore(\r\n  rootReducer(history),\r\n  composeEnhancers(\r\n   applyMiddleware(epicMiddleware)\r\n  ),\r\n)\r\n\r\nepicMiddleware.run(rootEpic)","import { ExchangeRates } from 'state/models';\r\nimport { createAction } from \"typesafe-actions\";\r\n\r\nexport const exchangeActions = {\r\n  init: createAction('@exchange/init')<void>(),\r\n  rates: createAction('@exchange/rates')<ExchangeRates>(),\r\n}\r\n","import { ActionType, createReducer } from 'typesafe-actions'\r\n\r\nimport { exchangeActions } from 'state/actions/exchange.actions'\r\nimport { walletActions } from 'state/actions/wallet.actions'\r\nimport { Currency } from 'state/models'\r\n\r\nexport type Action = ActionType<typeof walletActions & typeof exchangeActions>\r\n\r\nexport type ExchangeState = {\r\n  rates: Record<Currency, number>,\r\n  activeCurrency: Currency,\r\n}\r\n\r\nexport const initialExchangeState: ExchangeState = {\r\n  rates: {} as Record<Currency, number>,\r\n  activeCurrency: Currency.EUR,\r\n}\r\n\r\nexport const exchangeReducer = createReducer<ExchangeState, Action>(\r\n  initialExchangeState\r\n)\r\n  .handleAction(exchangeActions.rates, (state, { payload }) => ({\r\n    ...state,\r\n    rates: payload.rates,\r\n    activeCurrency: payload.base,\r\n  }))\r\n  ","import { Currency } from 'state/models';\r\nimport { createAction } from \"typesafe-actions\";\r\n\r\nexport const walletActions = {\r\n  resetBalances: createAction('@wallet/resetBalances')<void>(),\r\n  runExchange: createAction('@wallet/runExchange')<Currency>(),\r\n}\r\n","import { ActionType, createReducer } from 'typesafe-actions'\r\n\r\nimport { walletActions as actions } from 'state/actions/wallet.actions'\r\nimport { Currency } from 'state/models/currencies'\r\n\r\nexport type WalletState = {\r\n  balances: Record<Currency, number>,\r\n  currencies: Currency[],\r\n}\r\n\r\nexport const initialBalances: Record<Currency, number>= {\r\n  [Currency.USD]: 100,\r\n  [Currency.EUR]: 200,\r\n  [Currency.GBP]: 300,\r\n  [Currency.PLN]: 400,\r\n\r\n}\r\n\r\nexport const initialwalletState: WalletState = {\r\n  balances: initialBalances,\r\n  currencies: [Currency.USD, Currency.EUR, Currency.GBP, Currency.PLN],\r\n}\r\n\r\nexport const walletReducer = createReducer<WalletState, ActionType<typeof actions>>(\r\n  initialwalletState\r\n)\r\n  .handleAction(actions.resetBalances, (state) => ({\r\n    ...state,\r\n    balances: initialBalances\r\n  }))","import { Observable } from 'rxjs'\r\nimport { combineEpics, Epic } from 'redux-observable'\r\nimport { ActionType, isActionOf } from 'typesafe-actions'\r\nimport { filter, tap, ignoreElements } from 'rxjs/operators'\r\n\r\nimport { exchangeActions } from 'state/actions/exchange.actions'\r\nimport toast from 'utils/toast.helper'\r\n\r\ntype Actions = ActionType<typeof exchangeActions>\r\n\r\nconst initExchangePage$: Epic = (action$: Observable<Actions>) =>\r\n  action$.pipe(\r\n    filter(isActionOf([\r\n      exchangeActions.init,\r\n    ])),\r\n    tap(() => toast.info('starting rates updating')),\r\n    ignoreElements(),\r\n  )\r\n\r\nconst closeExchangePage$: Epic = (action$: Observable<Actions>) =>\r\n  action$.pipe(\r\n    filter(isActionOf([\r\n      exchangeActions.init,\r\n    ])),\r\n    tap(() => toast.info('stoping rates updating')),\r\n    ignoreElements(),\r\n  )\r\n\r\nexport const exchangeEpics: Epic = combineEpics(\r\n  initExchangePage$,\r\n  closeExchangePage$,\r\n)","export const testIdBuilder = (baseName: string) => (...names: string[]) =>\r\n  names.reduce((prev, curr) => `${prev}-${curr}`, baseName)\r\n","import { AxiosRequestConfig, AxiosResponse } from 'axios'\r\nimport axios, { Axios } from 'axios-observable'\r\nimport { map } from 'rxjs/operators'\r\n\r\n\r\nlet instance: Axios | null = null\r\n\r\nexport interface RequestConfig extends AxiosRequestConfig {\r\n  context?: {\r\n    noBasicHeaders?: boolean\r\n  },\r\n  params: any,\r\n  headers: any,\r\n}\r\n\r\nexport const http = (): Axios => {\r\n  if (!instance) {\r\n    instance = axios.create({})\r\n  }\r\n\r\n  return instance\r\n}\r\n\r\nexport const getHTTPData = <T>() => map((response: AxiosResponse<T>) => response.data)\r\n","import { of } from 'rxjs'\r\nimport { map, tap } from 'rxjs/operators'\r\n\r\nimport { Currency, ExchangeRates } from 'state/models'\r\nimport { getHTTPData, http, RequestConfig, mockedRates } from 'utils'\r\n\r\nconst useApiMock = false\r\n\r\nexport const Api = {\r\n  getRates(baseCurrency: Currency) {\r\n    const url = 'http://data.fixer.io/api/latest?access_key=4e8faff8b19cdd9877d40145e04b7148'\r\n    const config: RequestConfig = {\r\n      params: {\r\n        symbols: 'USD,PLN,GBP,EUR',\r\n        base: baseCurrency,\r\n      },\r\n      headers: {}\r\n    }\r\n\r\n    if (useApiMock) {\r\n      return of({ \r\n        base: mockedRates.data.base,\r\n        rates: mockedRates.data.rates,\r\n      })\r\n    }\r\n\r\n    return http()\r\n      .get<ExchangeRates>(url, config)\r\n      .pipe(\r\n        getHTTPData(),\r\n        map(({ base, rates }) => ({base, rates})),\r\n      )\r\n  },\r\n}\r\n","import { Observable } from 'rxjs'\r\nimport { combineEpics, Epic } from 'redux-observable'\r\nimport { ActionType, isActionOf } from 'typesafe-actions'\r\nimport { filter, ignoreElements, map, switchMap, tap } from 'rxjs/operators'\r\n\r\nimport { exchangeActions } from 'state/actions/exchange.actions'\r\nimport { walletActions } from 'state/actions/wallet.actions'\r\nimport { Api } from 'api'\r\nimport { Currency } from 'state/models'\r\n// import toast from 'utils/toast.helper'\r\n\r\n\r\ntype Actions = ActionType<typeof walletActions>\r\n\r\nconst onReset$: Epic = (\r\n  action$: Observable<Actions>,\r\n) =>\r\n  action$.pipe(\r\n    filter(isActionOf(walletActions.resetBalances)),\r\n    // tap(() => toast.success('Balances reseted to initial state')),\r\n    ignoreElements(),\r\n  )\r\n\r\n  const getRates$: Epic = (\r\n    action$: Observable<Actions>,\r\n  ) =>\r\n    action$.pipe(\r\n      filter(isActionOf(walletActions.runExchange)),\r\n      switchMap(({ payload }) => Api.getRates(payload).pipe(\r\n        map((data: any) => exchangeActions.rates(data))\r\n      )),\r\n    )\r\n\r\nexport const walletEpics: Epic = combineEpics(\r\n  onReset$,\r\n  getRates$,\r\n)","import { Paper } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\n\r\nexport const Panel = styled(Paper)`\r\n  box-shadow: 0px 2px 4px 2px lightblue !important;\r\n  margin: auto;\r\n  max-width: 400px;\r\n  min-width: 200px;\r\n  padding: 20px;\r\n`","import styled from 'styled-components';\r\n\r\nexport const Title = styled.h2`\r\n  color: lightcoral;\r\n  margin: 0;\r\n  padding-bottom: 10px;\r\n  text-align: center;\r\n`","import styled from 'styled-components';\r\nimport { Container as BaseContainer} from '@material-ui/core';\r\n\r\nexport const Container = styled(BaseContainer)`\r\n    height: 100vh;\r\n    padding-top: 10vh;\r\n`","import styled from 'styled-components';\r\n\r\nexport const ButtonsWraper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 10px;\r\n`\r\n","import React from 'react';\r\n\r\nimport { Title } from 'shared/components';\r\nimport { ExchangeMode } from 'state/models';\r\n\r\nimport { testIdBuilder } from 'utils';\r\n\r\nexport const componentId = 'Exchange';\r\n\r\nconst test = testIdBuilder(componentId);\r\n\r\nexport type ExchangeProps = { }\r\n\r\nexport const Exchange: React.FC<ExchangeProps> = () => {\r\n\r\n  return (\r\n    <div data-testid={test()}>\r\n      <Title> { ExchangeMode.BUY } </Title>\r\n    </div>\r\n  )\r\n};","import { createSelector } from 'reselect'\r\n\r\nimport { WalletState } from 'state/reducers/wallet.reducer'\r\nimport { RootState } from 'store'\r\n\r\nconst getWalletState = (state: RootState): WalletState => state.wallet\r\n\r\nexport const getBalances = createSelector(getWalletState, (state) => state.balances)\r\nexport const getCurrencies = createSelector(getWalletState, (state) => state.currencies)","//#region Imports\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport SyncIcon from '@material-ui/icons/Sync'\r\nimport { IconButton } from '@material-ui/core'\r\n\r\nimport { Currency } from 'state/models/currencies'\r\n\r\nexport const componentId = 'WalletRow'\r\n//#endregion\r\n//#region Styles\r\nconst ExchangeButton = styled(IconButton)`\r\n  color: lightcoral !important;\r\n  position: relative;\r\n  top: -3px;\r\n`\r\nconst Wrapper = styled.div` \r\n  font-size: 20px;\r\n  margin: 0 20px;\r\n`\r\n//#endregion\r\n\r\nexport type WalletRowProps = { \r\n  balance: number,\r\n  currency: Currency,\r\n  onExchangeClick: () => void,\r\n}\r\n\r\nexport const WalletRow: React.FC<WalletRowProps> = ({ \r\n  balance,\r\n  currency, \r\n  onExchangeClick \r\n}) => {\r\n\r\n  return (\r\n    <Wrapper data-testid={componentId}>\r\n      <i data-testid=\"Balance\">{balance}</i> \r\n      {' '}\r\n      <b data-testid=\"Currency\">{currency}</b>\r\n      \r\n      <ExchangeButton  data-testid=\"ExchangeButton\" onClick={onExchangeClick}>\r\n        <SyncIcon />\r\n      </ExchangeButton>\r\n    </Wrapper>\r\n  )\r\n};","import React, { useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button } from '@material-ui/core'\r\nimport { useSnackbar } from 'notistack'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getBalances, getCurrencies } from 'state/selectors'\r\nimport { ButtonsWraper, Title } from 'shared/components'\r\nimport { walletActions } from 'state/actions/wallet.actions'\r\nimport { testIdBuilder } from 'utils/test-id-builder.helper'\r\nimport { WalletRow } from 'components'\r\n\r\nexport const componentId = 'Wallet'\r\nexport const componentTitle = 'Balances'\r\n\r\n//#region Styles\r\nconst Balances = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nconst FullWidthButton = styled(Button)`\r\n  width: 100%;\r\n`\r\n//#endregion\r\n\r\nconst test = testIdBuilder(componentId);\r\n\r\nexport type WalletProps = { }\r\n\r\nexport const Wallet: React.FC<WalletProps> = () => {\r\n  const dispatch = useDispatch()\r\n  const balances = useSelector(getBalances)\r\n  const currencies = useSelector(getCurrencies)\r\n\r\n  return (\r\n    <div data-testid={componentId}>\r\n      <Title data-testid=\"Title\"> {componentTitle} </Title>\r\n\r\n      <Balances data-testid=\"Balances\">\r\n        {currencies.map((currency, index) => (\r\n          <WalletRow \r\n            key={index}\r\n            balance={balances[currency]}\r\n            currency={currency}  \r\n            onExchangeClick={() => dispatch(walletActions.runExchange(currency))}\r\n          />\r\n        ))}\r\n      </Balances>\r\n\r\n      <ButtonsWraper>\r\n        <FullWidthButton\r\n          data-testid=\"ResetButton\"\r\n          onClick={() => dispatch(walletActions.resetBalances())}\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n        >\r\n          Reset balances to initial state\r\n        </FullWidthButton>\r\n      </ButtonsWraper>\r\n    </div>\r\n  )\r\n};","import styled from 'styled-components';\nimport { Route } from 'react-router-dom'\n\nimport { Exchange, Wallet } from 'containers';\n\nimport { Container, Panel } from 'shared/components';\n\nfunction App({className}: {className?: string}) {\n  return (\n    <div className={className}>\n      <Container>\n        <Panel>\n          <Route exact path=\"/\" component={Wallet} />\n\n          <Route exact path=\"/ex\" component={Exchange} />\n        </Panel>\n      </Container>\n    </div>\n  );\n}\n\nexport default styled(App)`\n  background-color: aliceblue;\n  height: 100vh;\n`;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport { SnackbarProvider } from 'notistack'\n\nimport { store, history } from 'store'\nimport App from 'App'\nimport 'index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <SnackbarProvider maxSnack={5} anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}>\n      <Provider store={store}>\n        <ConnectedRouter history={history}>\n          <App />\n        </ConnectedRouter>\n      </Provider>\n    </SnackbarProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","export enum Currency {\r\n  USD = 'USD',\r\n  EUR = 'EUR',\r\n  PLN = 'PLN',\r\n  GBP = 'GBP',\r\n}","export * from './currencies'\r\nexport * from './exchange-mode'\r\nexport * from './exchange-rates'\r\n"],"sourceRoot":""}