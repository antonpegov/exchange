{"version":3,"sources":["state/models/currencies.ts","state/models/exchange-mode.ts","state/models/index.ts","store.ts","shared/components/Panel.tsx","theme.ts","shared/components/Title.tsx","shared/components/Container.tsx","shared/components/ButtonsWraper.tsx","state/selectors/wallet.selectors.ts","state/selectors/exchange.selectors.ts","state/actions/exchange.actions.ts","containers/exchange/Exchange.component.tsx","state/actions/wallet.actions.ts","components/WalletRow/WalletRow.component.tsx","containers/wallet/Wallet.component.tsx","state/helpers/next-currency.helper.ts","state/helpers/to-fixed.helper.ts","state/helpers/update-amounts.helper.ts","state/reducers/exchange.reducer.ts","state/reducers/wallet.reducer.ts","utils/http.ts","api.ts","state/epics/exchange.epics.ts","state/epics/wallet.epics.ts","App.tsx","index.tsx"],"names":["Currency","ExchangeMode","history","Panel","styled","Paper","COLOR_PRIMARY","COLOR_BLUE_PRIMARY","COLOR_BLUE_SECCONDARY","WHITE","INPUT_UNDERLINE_COLOR","theme","createMuiTheme","palette","action","disabled","primary","main","overrides","MuiButton","root","fontSize","fontFamily","margin","outlinedPrimary","backgroundColor","border","color","containedPrimary","MuiTextField","display","marginBottom","MuiDialog","minWidth","MuiFab","height","position","width","zIndex","MuiInput","colorSecondary","underline","borderBottomColor","Title","h2","Container","BaseContainer","ButtonsWraper","div","getWalletState","state","wallet","getBalances","createSelector","balances","getCurrencies","currencies","getExchangeState","exchange","getMode","mode","getBaseAmount","baseAmount","getBaseCurrency","baseCurrency","getTargetAmount","targetAmount","getTargetCurrency","targetCurrency","getRate","rates","geterror","error","getErrorText","errorText","getTargets","targets","exchangeActions","init","createAction","changeMode","changeBaseCurrency","changeTargetCurrency","return","makeExchange","updateBaseAmount","updateTargetAmount","Wrapper","form","Rate","Amount","Balance","Error","props","visible","Direction","Fab","Exchange","dispatch","useDispatch","useSelector","rate","useState","submitButtonLabel","setSubmitButtonLabel","useEffect","word","SELL","data-testid","autoComplete","TextField","id","label","style","flexGrow","value","onChange","event","target","test","baseBalance","targetBalance","select","justifyContent","map","option","index","MenuItem","onClick","ArrowDownwardRounded","ArrowUpwardRounded","marginTop","filter","item","Button","variant","walletActions","resetBalances","runExchange","updateBalances","ExchangeButton","IconButton","WalletRow","balance","currency","onExchangeClick","SyncAlt","Balances","FullWidthButton","Wallet","nextCurrency","baseCurrencyIndex","findIndex","TypeError","toFixed","Math","round","updateAmounts","isBaseAmount","newBaseAmount","newTargetAmount","match","toString","newTarget","newBase","initialExchangeState","active","EUR","USD","exchangeReducer","createReducer","handleAction","payload","base","BUY","initialBalances","GBP","PLN","initialWalletState","walletReducer","instance","Api","config","params","symbols","headers","axios","create","get","pipe","response","data","exchangeEpics","combineEpics","action$","state$","isActionOf","withLatestFrom","mapTo","push","switchMap","walletEpics","actions$","newBaseBalance","newTargetBalance","epicMiddleware","createEpicMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createBrowserHistory","rootEpic","store","createStore","combineReducers","router","connectRouter","applyMiddleware","routerMiddleware","run","className","exact","path","component","to","ReactDOM","render","ThemeProvider","maxSnack","anchorOrigin","vertical","horizontal","document","getElementById"],"mappings":"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","file":"static/js/main.eda8cede.chunk.js","sourcesContent":["export enum Currency {\r\n  USD = 'USD',\r\n  EUR = 'EUR',\r\n  PLN = 'PLN',\r\n  GBP = 'GBP',\r\n}","export enum ExchangeMode {\r\n  SELL = 'Sell',\r\n  BUY = 'Buy'\r\n}","export * from './currencies'\r\nexport * from './exchange-mode'\r\nexport * from './exchange-rates'\r\nexport * from './amount-update.payload'\r\n","import { createBrowserHistory, History } from 'history'\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router'\r\nimport { combineEpics, createEpicMiddleware } from 'redux-observable'\r\nimport { combineReducers, compose, createStore, applyMiddleware } from 'redux'\r\n\r\nimport { exchangeReducer } from 'state/reducers/exchange.reducer'\r\nimport { walletReducer } from 'state/reducers/wallet.reducer'\r\nimport { exchangeEpics } from 'state/epics/exchange.epics'\r\nimport { walletEpics } from 'state/epics/wallet.epics'\r\n\r\ndeclare global {  \r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: <R>(a: R) => R\r\n  }\r\n}\r\n\r\nexport type RootState = NonNullable<Parameters<ReturnType<typeof makeRootReducer>>[0]>\r\n\r\nconst epicMiddleware = createEpicMiddleware()\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nexport const rootEpic = combineEpics(\r\n  exchangeEpics,\r\n  walletEpics,\r\n)\r\n\r\nexport const makeRootReducer = (history: History) => combineReducers({\r\n  router: connectRouter(history),\r\n  wallet: walletReducer,\r\n  exchange: exchangeReducer,\r\n})\r\n\r\nexport const store = createStore(\r\n  makeRootReducer(history),\r\n  composeEnhancers(\r\n   applyMiddleware(epicMiddleware, routerMiddleware(history)),\r\n  ),\r\n)\r\n\r\nepicMiddleware.run(rootEpic)","import { Paper } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\n\r\nexport const Panel = styled(Paper)`\r\n  box-shadow: 0px 2px 4px 2px lightblue !important;\r\n  margin: auto;\r\n  max-width: 400px;\r\n  min-width: 300px;\r\n  padding: 20px;\r\n`","import { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nexport const COLOR_PRIMARY = '#020941'\r\nexport const COLOR_BLUE_PRIMARY = '#2699fb'\r\nexport const COLOR_BLUE_SECCONDARY = '#84c6ff'\r\nconst WHITE = 'white'\r\nconst INPUT_UNDERLINE_COLOR = COLOR_BLUE_SECCONDARY\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    action: {\r\n      disabled: 'set color of text here',\r\n    },\r\n    primary: {\r\n      main: COLOR_PRIMARY,\r\n    },\r\n  },\r\n\r\n  overrides: {\r\n    MuiButton: {\r\n      root: {\r\n        fontSize: '1rem',\r\n        fontFamily: '\"Exo 2\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n        margin: '5px',\r\n      },\r\n      outlinedPrimary: {\r\n        backgroundColor: COLOR_PRIMARY,\r\n        border: `solid 2px ${COLOR_BLUE_PRIMARY}`,\r\n        color: WHITE,\r\n        '&:hover': {\r\n          backgroundColor: COLOR_PRIMARY,\r\n          border: `solid 2px ${COLOR_BLUE_SECCONDARY}`,\r\n        },\r\n      },\r\n      containedPrimary: {\r\n        // backgroundColor: 'linear-gradient(90deg, rgba(132,198,255,1) 10%,\r\n        // rgba(38,153,251,1) 100%)',\r\n        backgroundColor: COLOR_BLUE_PRIMARY,\r\n        color: WHITE,\r\n        '&:hover': {\r\n          backgroundColor: COLOR_BLUE_SECCONDARY,\r\n        },\r\n      },\r\n    },\r\n\r\n    MuiTextField: {\r\n      root: {\r\n        display: 'flex',\r\n        marginBottom: '10px',\r\n      }\r\n    },\r\n\r\n    MuiDialog: {\r\n      root: {\r\n        minWidth: '350px',\r\n      },\r\n    },\r\n\r\n    MuiFab: {\r\n      root: {\r\n        backgroundColor: 'aliceblue',\r\n        color: 'lightcoral',\r\n        height: '40px',\r\n        position: 'absolute',\r\n        width: '40px',\r\n        zIndex: 100,\r\n      }\r\n    },\r\n\r\n    MuiInput: {\r\n      colorSecondary: {\r\n        color: WHITE,\r\n      },\r\n\r\n      underline: {\r\n        borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n\r\n        '&:not($disabled):after': {\r\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n        },\r\n\r\n        '&:hover:not($disabled):after': {\r\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n        },\r\n\r\n        '&:not($disabled):before': {\r\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n        },\r\n\r\n        '&:hover:not($disabled):before': {\r\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n        },\r\n      },\r\n    },\r\n  },\r\n})\r\n","import styled from 'styled-components';\r\nimport { COLOR_BLUE_PRIMARY } from 'theme';\r\n\r\nexport const Title = styled.h2`\r\n  color: ${COLOR_BLUE_PRIMARY};\r\n  font-size: 1.8em;\r\n  margin: 0;\r\n  padding-bottom: 10px;\r\n  text-align: center;\r\n`","import styled from 'styled-components';\r\nimport { Container as BaseContainer} from '@material-ui/core';\r\n\r\nexport const Container = styled(BaseContainer)`\r\n    height: 100vh;\r\n    padding-top: 10vh;\r\n`","import styled from 'styled-components';\r\n\r\nexport const ButtonsWraper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 10px;\r\n  margin: 35px 0 5px;\r\n`\r\n","import { createSelector } from 'reselect'\r\n\r\nimport { WalletState } from 'state/reducers/wallet.reducer'\r\nimport { RootState } from 'store'\r\n\r\nconst getWalletState = (state: RootState): WalletState => state.wallet\r\n\r\nexport const getBalances = createSelector(getWalletState, (state) => state.balances)\r\nexport const getCurrencies = createSelector(getWalletState, (state) => state.currencies)","import { createSelector } from 'reselect'\r\n\r\nimport { ExchangeState } from 'state/reducers'\r\nimport { RootState } from 'store'\r\n\r\nconst getExchangeState = (state: RootState): ExchangeState => state.exchange\r\n\r\nexport const getMode = createSelector(getExchangeState, (state) => state.mode)\r\nexport const getBaseAmount = createSelector(getExchangeState, (state) => state.baseAmount)\r\nexport const getBaseCurrency = createSelector(getExchangeState, (state) => state.baseCurrency)\r\nexport const getTargetAmount = createSelector(getExchangeState, (state) => state.targetAmount)\r\nexport const getTargetCurrency = createSelector(getExchangeState, (state) => state.targetCurrency)\r\n\r\nexport const getRate = createSelector(getExchangeState, (state) => state.rates[state.targetCurrency])\r\nexport const geterror = createSelector(getExchangeState, (state) => state.error)\r\nexport const getErrorText = createSelector(getExchangeState, (state) => state.errorText)\r\nexport const getTargets = createSelector(getExchangeState, (state) => state.targets)\r\n","import { AmountUpdatePayload, Currency, ExchangeRates } from 'state/models';\r\nimport { createAction } from \"typesafe-actions\";\r\n\r\nexport const exchangeActions = {\r\n  init: createAction('@exchange/init')<{ base: Currency, currencies: Currency[] }>(),\r\n  rates: createAction('@exchange/rates')<ExchangeRates>(),\r\n\r\n  changeMode: createAction('@exchange/changeMode')<void>(),\r\n  changeBaseCurrency: createAction('@exchange/changeBaseCurrency')<Currency>(),\r\n  changeTargetCurrency: createAction('@exchange/changeBaseCurrency')<Currency>(),\r\n  \r\n  return: createAction('@exchange/return')<void>(),\r\n  makeExchange: createAction('@exchange/makeExchange')<void>(),\r\n  \r\n  updateBaseAmount: createAction('@exchange/updateBaseAmount')<AmountUpdatePayload>(),\r\n  updateTargetAmount: createAction('@exchange/updateTargetAmount')<AmountUpdatePayload>(),\r\n}\r\n","\r\n//#region Imports\r\nimport styled from 'styled-components'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Fab, MenuItem, TextField } from '@material-ui/core'\r\nimport { ArrowUpwardRounded, ArrowDownwardRounded } from '@material-ui/icons'\r\n\r\nimport { ButtonsWraper, Title } from 'shared/components'\r\n\r\nimport { getBalances, getBaseAmount, getBaseCurrency, getErrorText, geterror, getMode, getRate, getTargetAmount, getTargetCurrency, getTargets } from 'state/selectors'\r\nimport { Currency, ExchangeMode } from 'state/models'\r\nimport { exchangeActions } from 'state/actions/exchange.actions'\r\n\r\nexport const componentId = 'Exchange'\r\n//#endregion\r\n//#region Styles\r\nconst Wrapper = styled.form`\r\n  position: relative;\r\n`\r\nconst Rate = styled.div`\r\n  color: lightcoral;\r\n  display: flex;\r\n  font-weight: 600;\r\n  justify-content: center;\r\n`\r\nconst Amount = styled.div`\r\n  display: flex;\r\n`\r\nconst Balance = styled.div`\r\n  color: lightcoral;\r\n  display: flex;\r\n  font-size: 12px;\r\n  justify-content: flex-end;\r\n  position: relative;\r\n  right: 0px;\r\n  top: -8px;\r\n  width: 100%;\r\n`\r\nconst Error = styled.div<{visible: boolean}>` \r\n  color: red;\r\n  display: ${props => props.visible ? 'flex' : 'none'};\r\n  justify-content: center;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  position: absolute;\r\n  width: 100%;\r\n`\r\nconst Direction = styled(Fab)`\r\n  top: 137px;\r\n  left: 175px;\r\n`\r\n//#endregion\r\n\r\nexport type ExchangeProps = { }\r\n\r\nexport const Exchange: React.FC<ExchangeProps> = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const balances = useSelector(getBalances)\r\n  const baseAmount = useSelector(getBaseAmount)\r\n  const baseCurrency = useSelector(getBaseCurrency)\r\n  const errorText = useSelector(getErrorText)\r\n  const error = useSelector(geterror)\r\n  const mode = useSelector(getMode)\r\n  const rate = useSelector(getRate)\r\n  const targets = useSelector(getTargets)\r\n  const targetAmount = useSelector(getTargetAmount)\r\n  const targetCurrency = useSelector(getTargetCurrency)\r\n\r\n  const [submitButtonLabel, setSubmitButtonLabel] = useState('')\r\n\r\n  useEffect(() => {\r\n    const word = mode === ExchangeMode.SELL ? 'for' : 'with'\r\n    \r\n    setSubmitButtonLabel(`${mode} ${baseCurrency} ${word} ${targetCurrency}`)\r\n  }, [mode, baseCurrency, targetCurrency])\r\n\r\n  const handleBaseCurrensyChange = (event: React.ChangeEvent<HTMLInputElement>): void => { \r\n    dispatch(exchangeActions.changeBaseCurrency(event.target.value as Currency))\r\n  }\r\n  const handleTargetCurrensyChange  = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    dispatch(exchangeActions.changeTargetCurrency(event.target.value as Currency))\r\n  }\r\n  const handleBaseAmountChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (!event.target.value || /^\\d+(\\.([0-9]([0-9])?)?)?$/.test(event.target.value)) {\r\n      dispatch(exchangeActions.updateBaseAmount({\r\n        value: event.target.value, \r\n        baseBalance: balances[baseCurrency],\r\n        targetBalance: balances[targetCurrency],\r\n      }))\r\n    }\r\n  }\r\n  const handleTargetAmountChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (!event.target.value || /^\\d+(\\.([0-9]([0-9])?)?)?$/.test(event.target.value)) {\r\n      dispatch(exchangeActions.updateTargetAmount({\r\n        value: event.target.value, \r\n        baseBalance: balances[baseCurrency],\r\n        targetBalance: balances[targetCurrency],\r\n      }))\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <Wrapper data-testid={componentId} autoComplete=\"off\">\r\n      <Title data-testid=\"Title\"> {mode} {baseCurrency}</Title>\r\n\r\n      <Rate data-testid=\"Rate\"> 1 {baseCurrency} = {rate} {targetCurrency}</Rate>\r\n\r\n      <Amount>\r\n        <TextField\r\n          data-testid=\"baseAmount\"\r\n          id=\"baseAmount\"\r\n          label={baseCurrency}\r\n          style={{flexGrow: 1}}\r\n          value={baseAmount}\r\n          onChange={handleBaseAmountChange}\r\n        />\r\n\r\n        <TextField\r\n          id=\"standard-select-currency\"\r\n          select\r\n          style={{width: '25px', justifyContent: 'flex-end'}}\r\n          value={''}\r\n          onChange={handleBaseCurrensyChange}\r\n        >\r\n          {targets.map((option, index) => (\r\n            <MenuItem key={index} value={option}>\r\n              {option}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n      </Amount>\r\n\r\n      <Balance>Balance: {balances[baseCurrency]} {baseCurrency}</Balance>\r\n\r\n      <Direction onClick={() => dispatch(exchangeActions.changeMode())}>\r\n        {mode === ExchangeMode.SELL \r\n          ? <ArrowDownwardRounded />\r\n          : <ArrowUpwardRounded />\r\n        }\r\n      </Direction>\r\n\r\n      <Amount>\r\n        <TextField\r\n          data-testid=\"targetAmount\"\r\n          id=\"targetAmount\"\r\n          label={targetCurrency}\r\n          value={targetAmount}\r\n          style={{flexGrow: 1, marginTop: '15px'}}\r\n          onChange={handleTargetAmountChange}\r\n        />\r\n\r\n        <TextField\r\n          id=\"standard-select-currency\"\r\n          select\r\n          style={{width: '25px', justifyContent: 'flex-end'}}\r\n          value={''}\r\n          onChange={handleTargetCurrensyChange}\r\n        >\r\n          {targets.filter((item => item !== targetCurrency)).map((option, index) => (\r\n            <MenuItem key={index} value={option}>\r\n              {option}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n      </Amount>\r\n\r\n      <Balance>Balance: {balances[targetCurrency]} {targetCurrency}</Balance>\r\n\r\n      <Error visible={error}>{errorText}</Error>\r\n\r\n      <ButtonsWraper>\r\n        <Button\r\n          color=\"primary\"\r\n          data-testid=\"ReturnButton\"\r\n          onClick={() => dispatch(exchangeActions.return())}\r\n          variant=\"contained\"\r\n        >\r\n          Return\r\n        </Button>\r\n\r\n        <Button\r\n          color=\"primary\"\r\n          data-testid=\"SubmitButton\"\r\n          disabled={error}\r\n          onClick={() => dispatch(exchangeActions.makeExchange())}\r\n          style={{'flexGrow': 1}}\r\n          variant=\"contained\"\r\n        >\r\n          {submitButtonLabel}\r\n        </Button>\r\n      </ButtonsWraper>\r\n    </Wrapper>\r\n  )\r\n};\r\n","import { createAction } from 'typesafe-actions'\r\n\r\nimport { Currency } from 'state/models'\r\n\r\nexport const walletActions = {\r\n  resetBalances: createAction('@wallet/resetBalances')<void>(),\r\n  runExchange: createAction('@wallet/runExchange')<Currency>(),\r\n  updateBalances: createAction('@wallet/updateBalances')<Record<Currency, number>>(),\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { SyncAlt } from '@material-ui/icons'\r\nimport { IconButton } from '@material-ui/core'\r\n\r\nimport { Currency } from 'state/models/currencies'\r\n//#region Styles\r\nconst ExchangeButton = styled(IconButton)`\r\n  color: lightcoral !important;\r\n  position: relative;\r\n  top: -3px;\r\n`\r\nconst Wrapper = styled.div` \r\n  font-size: 20px;\r\n  margin: 0 10px;\r\n`\r\n//#endregion\r\nexport const componentId = 'WalletRow'\r\n\r\nexport type WalletRowProps = { \r\n  balance: number,\r\n  currency: Currency,\r\n  onExchangeClick: () => void,\r\n}\r\n\r\nexport const WalletRow: React.FC<WalletRowProps> = ({ \r\n  balance,\r\n  currency, \r\n  onExchangeClick \r\n}) => {\r\n\r\n  return (\r\n    <Wrapper data-testid={componentId}>\r\n      <ExchangeButton  data-testid=\"ExchangeButton\" onClick={onExchangeClick}>\r\n        <SyncAlt />\r\n      </ExchangeButton>\r\n\r\n      <span data-testid=\"Balance\">\r\n        <b data-testid=\"Currency\">{currency}</b> {balance}\r\n      </span>\r\n    </Wrapper>\r\n  )\r\n};","//#region Imports\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button } from '@material-ui/core'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getBalances, getCurrencies } from 'state/selectors'\r\nimport { ButtonsWraper, Title } from 'shared/components'\r\nimport { walletActions } from 'state/actions/wallet.actions'\r\nimport { WalletRow } from 'components'\r\n\r\nexport const componentId = 'Wallet'\r\nexport const componentTitle = 'Balances'\r\n//#endregion\r\n//#region Styles\r\nconst Balances = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: -30px;\r\n`\r\n\r\nconst FullWidthButton = styled(Button)`\r\n  width: 100%;\r\n`\r\n//#endregion\r\n\r\nexport type WalletProps = { }\r\n\r\nexport const Wallet: React.FC<WalletProps> = () => {\r\n  const dispatch = useDispatch()\r\n  const balances = useSelector(getBalances)\r\n  const currencies = useSelector(getCurrencies)\r\n\r\n  return (\r\n    <div data-testid={componentId}>\r\n      <Title data-testid=\"Title\"> {componentTitle} </Title>\r\n\r\n      <Balances data-testid=\"Balances\">\r\n        {currencies.map((currency, index) => (\r\n          <WalletRow \r\n            key={index}\r\n            balance={balances[currency]}\r\n            currency={currency}  \r\n            onExchangeClick={() => dispatch(walletActions.runExchange(currency))}\r\n          />\r\n        ))}\r\n      </Balances>\r\n\r\n      <ButtonsWraper>\r\n        <FullWidthButton\r\n          data-testid=\"ResetButton\"\r\n          onClick={() => dispatch(walletActions.resetBalances())}\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n        >\r\n          Reset balances to initial state\r\n        </FullWidthButton>\r\n      </ButtonsWraper>\r\n    </div>\r\n  )\r\n};","import { Currency } from 'state/models';\r\n\r\nexport const nextCurrency = (baseCurrency: Currency, currencies: Currency[]): Currency | void => {\r\n  const baseCurrencyIndex = currencies.findIndex((item) => item === baseCurrency);\r\n\r\n  if (baseCurrencyIndex < 0) {\r\n    throw new TypeError('Base currency is not in the list')\r\n  }\r\n\r\n  return baseCurrencyIndex === 0 ? currencies[1] : currencies[0] \r\n}\r\n","export const toFixed = (value: number | string): number => {\r\n  \r\n  return (Math.round(+value * 100)/100)\r\n}","import { toFixed } from 'state/helpers';\r\nimport { AmountUpdatePayload, ExchangeMode } from 'state/models';\r\nimport { ExchangeState } from 'state/reducers';\r\n\r\nexport const updateAmounts = (\r\n  { baseAmount, targetAmount, targetCurrency, mode, rates }: ExchangeState,\r\n  { baseBalance, targetBalance, value }: AmountUpdatePayload,\r\n  isBaseAmount: boolean,\r\n): Partial<ExchangeState> => {\r\n  \r\n  let error: boolean\r\n  let newBaseAmount: string\r\n  let newTargetAmount: string\r\n  let errorText = 'Insufficient balance'\r\n  \r\n  if (value.match(/^\\d+\\.$/g)) {\r\n    error = true\r\n    errorText = ''\r\n    newBaseAmount = isBaseAmount ? value : baseAmount\r\n    newTargetAmount = isBaseAmount ? targetAmount : value\r\n  } else if (value === '') {\r\n    error = true\r\n    errorText = ''\r\n    newBaseAmount = ''\r\n    newTargetAmount = ''\r\n  } else {\r\n    if (isBaseAmount) { \r\n      if (mode === ExchangeMode.SELL) {\r\n        error = +value > baseBalance\r\n        newBaseAmount = value\r\n        newTargetAmount = toFixed(+value * rates[targetCurrency]).toString()\r\n      } else {\r\n        const newTarget = toFixed(+value * rates[targetCurrency])\r\n\r\n        error = newTarget > targetBalance\r\n        newBaseAmount = value\r\n        newTargetAmount = newTarget.toString()\r\n      }\r\n    } else {\r\n      if (mode === ExchangeMode.SELL) {\r\n        const newBase = toFixed(+value / rates[targetCurrency])\r\n\r\n        error = newBase > baseBalance\r\n        newBaseAmount = newBase.toString()\r\n        newTargetAmount = value\r\n      } else {\r\n        error = +value > targetBalance\r\n        newBaseAmount = toFixed(+value / rates[targetCurrency]).toString()\r\n        newTargetAmount = value\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    baseAmount: newBaseAmount,\r\n    targetAmount: newTargetAmount,\r\n    error,\r\n    errorText,\r\n  }\r\n}","import { ActionType, createReducer } from 'typesafe-actions'\r\n\r\nimport { walletActions, exchangeActions } from 'state/actions'\r\nimport { Currency, ExchangeMode } from 'state/models'\r\nimport { nextCurrency, updateAmounts } from 'state/helpers'\r\n\r\ntype Action = ActionType<typeof walletActions & typeof exchangeActions>\r\n\r\nexport type ExchangeState = {\r\n  active: boolean,\r\n  baseAmount: string,\r\n  baseCurrency: Currency,\r\n  error: boolean,\r\n  errorText: string,\r\n  mode: ExchangeMode,\r\n  rates: Record<Currency, number>,\r\n  targetAmount: string,\r\n  targetCurrency: Currency,\r\n  targets: Currency[],\r\n}\r\n\r\nexport const initialExchangeState: ExchangeState = {\r\n  active: false,\r\n  baseAmount: '',\r\n  baseCurrency: Currency.EUR,\r\n  error: true,\r\n  errorText: '',\r\n  mode: ExchangeMode.SELL,\r\n  rates: {} as Record<Currency, number>,\r\n  targetAmount: '',\r\n  targetCurrency: Currency.USD,\r\n  targets: [],\r\n}\r\n\r\nexport const exchangeReducer = createReducer<ExchangeState, Action>(\r\n  initialExchangeState\r\n)\r\n  .handleAction(exchangeActions.init, (state, { payload }) => ({\r\n    ...state,\r\n    active: true,\r\n    baseCurrency: payload.base,\r\n    targetCurrency: nextCurrency(payload.base, payload.currencies) || payload.base,\r\n    targets: payload.currencies.filter(item => item !== payload.base)\r\n  }))\r\n\r\n  .handleAction(exchangeActions.return, () => initialExchangeState)\r\n\r\n  .handleAction(exchangeActions.rates, (state, { payload }) => ({\r\n    ...state,\r\n    rates: payload.rates,\r\n    baseCurrency: payload.base,\r\n  }))\r\n\r\n  .handleAction(exchangeActions.updateBaseAmount, (state, { payload }) => ({\r\n    ...state,\r\n    ...updateAmounts(state, payload, true),\r\n  }))\r\n\r\n  .handleAction(exchangeActions.updateTargetAmount, (state, { payload }) => ({\r\n    ...state,\r\n    ...updateAmounts(state, payload, false),\r\n  }))\r\n  \r\n  .handleAction(walletActions.updateBalances, (state) => ({\r\n    ...state,\r\n    baseAmount: '',\r\n    targetAmount: '',\r\n  }))\r\n\r\n  .handleAction(exchangeActions.changeMode, (state) => ({\r\n    ...state,\r\n    mode: state.mode === ExchangeMode.BUY ? ExchangeMode.SELL : ExchangeMode.BUY,\r\n    baseAmount: '',\r\n    targetAmount: '',\r\n    error: true,\r\n  }))\r\n\r\n  .handleAction(exchangeActions.makeExchange, (state) => ({\r\n    ...state,\r\n    error: true\r\n  }))","import { ActionType, createReducer } from 'typesafe-actions'\r\n\r\nimport { walletActions, exchangeActions } from 'state/actions'\r\nimport { Currency } from 'state/models'\r\n\r\ntype Action = ActionType<typeof walletActions & typeof exchangeActions>\r\n\r\nexport type WalletState = {\r\n  balances: Record<Currency, number>,\r\n  currencies: Currency[],\r\n}\r\n\r\nexport const initialBalances: Record<Currency, number> = {\r\n  [Currency.USD]: 100,\r\n  [Currency.EUR]: 200,\r\n  [Currency.GBP]: 300,\r\n  [Currency.PLN]: 400,\r\n\r\n}\r\n\r\nexport const initialWalletState: WalletState = {\r\n  balances: initialBalances,\r\n  currencies: [Currency.USD, Currency.EUR, Currency.GBP, Currency.PLN],\r\n}\r\n\r\nexport const walletReducer = createReducer<WalletState, Action>(\r\n  initialWalletState\r\n)\r\n  .handleAction(walletActions.resetBalances, (state) => ({\r\n    ...state,\r\n    balances: { ...initialBalances },\r\n  }))\r\n\r\n  .handleAction(walletActions.updateBalances, (state, { payload }) => ({\r\n    ...state,\r\n    balances: payload,\r\n  }))","import { AxiosRequestConfig, AxiosResponse } from 'axios'\r\nimport axios, { Axios } from 'axios-observable'\r\nimport { map } from 'rxjs/operators'\r\n\r\n\r\nlet instance: Axios | null = null\r\n\r\nexport interface RequestConfig extends AxiosRequestConfig {\r\n  context?: {\r\n    noBasicHeaders?: boolean\r\n  },\r\n  params: any,\r\n  headers: any,\r\n}\r\n\r\nexport const http = (): Axios => {\r\n  if (!instance) {\r\n    instance = axios.create({})\r\n  }\r\n\r\n  return instance\r\n}\r\n\r\nexport const getHTTPData = <T>() => map((response: AxiosResponse<T>) => response.data)\r\n","import { of } from 'rxjs'\r\nimport { map } from 'rxjs/operators'\r\n\r\nimport { Currency, ExchangeRates } from 'state/models'\r\n\r\nimport { getHTTPData, http, RequestConfig, mockedRates } from 'utils'\r\n\r\nconst useApiMock = false\r\n\r\nexport const Api = {\r\n  getRates(baseCurrency: Currency) {\r\n    const url = 'https://data.fixer.io/api/latest?access_key=4e8faff8b19cdd9877d40145e04b7148'\r\n    const config: RequestConfig = {\r\n      params: {\r\n        symbols: 'USD,PLN,GBP,EUR',\r\n        base: baseCurrency,\r\n      },\r\n      headers: {}\r\n    }\r\n\r\n    if (useApiMock) {\r\n      return of({ \r\n        base: mockedRates.data.base,\r\n        rates: mockedRates.data.rates,\r\n      })\r\n    }\r\n\r\n    return http()\r\n      .get<ExchangeRates>(url, config)\r\n      .pipe(\r\n        getHTTPData(),\r\n        map(({ base, rates }) => ({base, rates})),\r\n      )\r\n  },\r\n}\r\n","import { push } from 'connected-react-router'\r\nimport { Observable } from 'rxjs'\r\nimport { combineEpics, Epic } from 'redux-observable'\r\nimport { ActionType, isActionOf } from 'typesafe-actions'\r\nimport { filter, mapTo, map, switchMap, withLatestFrom } from 'rxjs/operators'\r\n\r\nimport { exchangeActions, walletActions } from 'state/actions'\r\nimport { getCurrencies } from 'state/selectors'\r\nimport { RootState } from 'store'\r\nimport { Api } from 'api'\r\n\r\ntype Actions = ActionType<typeof exchangeActions & typeof walletActions>\r\n\r\nconst initExchangePage$: Epic = (\r\n  action$: Observable<Actions>, \r\n  state$: Observable<RootState>\r\n) =>\r\n  action$.pipe(\r\n    filter(isActionOf(walletActions.runExchange)),\r\n    withLatestFrom(state$.pipe(map(state => getCurrencies(state)))),\r\n    map(([{ payload }, currencies]) => exchangeActions.init({ base: payload, currencies })),\r\n  )\r\n\r\nconst getRates$: Epic = (action$: Observable<Actions>) =>\r\n  action$.pipe(\r\n    filter(isActionOf(walletActions.runExchange)),\r\n    switchMap(({ payload }) => Api.getRates(payload).pipe(\r\n      map((data: any) => exchangeActions.rates(data))\r\n    )),\r\n  )\r\n\r\nconst closeExchangePage$: Epic = (action$: Observable<Actions>) =>\r\n  action$.pipe(\r\n    filter(isActionOf(exchangeActions.return)),\r\n    mapTo(push('/balances')),\r\n  )\r\n\r\nexport const exchangeEpics: Epic = combineEpics(\r\n  initExchangePage$,\r\n  closeExchangePage$,\r\n  getRates$,\r\n)\r\n","import { push } from 'connected-react-router'\r\nimport { Observable } from 'rxjs'\r\nimport { combineEpics, Epic } from 'redux-observable'\r\nimport { ActionType, isActionOf } from 'typesafe-actions'\r\nimport { filter, map, mapTo, withLatestFrom } from 'rxjs/operators'\r\n\r\nimport { exchangeActions, walletActions } from 'state/actions'\r\nimport { ExchangeMode } from 'state/models'\r\nimport { RootState } from 'store'\r\nimport { toFixed } from 'state/helpers'\r\n\r\ntype Actions = ActionType<typeof walletActions & typeof exchangeActions>\r\n\r\nconst openExchangeView$: Epic = (\r\n  actions$: Observable<Actions>,\r\n) =>\r\n  actions$.pipe(\r\n    filter(isActionOf(walletActions.runExchange)),\r\n    mapTo(push('/currency')),\r\n  )\r\n\r\nconst makeExchange$: Epic = (\r\n  actions$: Observable<Actions>,\r\n  state$: Observable<RootState>,\r\n) => \r\n  actions$.pipe(\r\n    filter(isActionOf(exchangeActions.makeExchange)),\r\n    withLatestFrom(\r\n      state$.pipe(map(state => state.wallet)), \r\n      state$.pipe(map(state => state.exchange))\r\n    ),\r\n    map(([, { balances },  exchange]) => {\r\n      let newBaseBalance, newTargetBalance  \r\n      \r\n      if (exchange.mode === ExchangeMode.BUY) {\r\n        newBaseBalance = toFixed(balances[exchange.baseCurrency] + +exchange.baseAmount)\r\n        newTargetBalance = toFixed(balances[exchange.targetCurrency] - +exchange.targetAmount)\r\n      } else {\r\n        newBaseBalance = toFixed(balances[exchange.baseCurrency] - +exchange.baseAmount)\r\n        newTargetBalance = toFixed(balances[exchange.targetCurrency] + +exchange.targetAmount)\r\n      }\r\n\r\n      return walletActions.updateBalances({\r\n        ...balances,\r\n        [exchange.baseCurrency]: newBaseBalance,\r\n        [exchange.targetCurrency]: newTargetBalance,\r\n      })\r\n    })\r\n  )\r\n\r\nexport const walletEpics: Epic = combineEpics(\r\n  openExchangeView$,\r\n  makeExchange$,\r\n)","import styled from 'styled-components';\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport { Route, Router, Redirect, Switch } from 'react-router-dom'\n\nimport { Exchange, Wallet } from 'containers';\nimport { Container, Panel } from 'shared/components';\nimport { store, history } from 'store'\n\nfunction App({className}: {className?: string}) {\n  return (\n    <div className={className}>\n      <Provider store={store}>\n        <Container>\n          <Panel>\n            <ConnectedRouter history={history}>\n              <Router history={history}>\n                <Switch>\n                  <Route exact={true} path=\"/balances\" component={Wallet} />\n                  <Route exact={true} path=\"/currency\" component={Exchange} />\n                  <Route>\n                    <Redirect to=\"/balances\" />\n                  </Route>\n                </Switch>\n              </Router>\n            </ConnectedRouter>\n          </Panel>\n        </Container>\n      </Provider>\n    </div>\n  );\n}\n\nexport default styled(App)`\n  background-color: aliceblue;\n  height: 100vh;\n`;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from '@material-ui/core'\nimport { SnackbarProvider } from 'notistack'\n\nimport App from 'App'\nimport { theme } from 'theme'\nimport 'index.css'\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <SnackbarProvider maxSnack={5} anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}>\n      <App />\n    </SnackbarProvider>\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}