{"version":3,"sources":["state/models/index.ts","state/models/currency.ts","state/models/exchange-mode.ts","state/models/amount.ts","store.ts","shared/components/Panel.tsx","theme.ts","shared/components/Title.tsx","shared/components/Container.tsx","shared/components/ButtonsWraper.tsx","state/selectors/wallet.selectors.ts","state/selectors/exchange.selectors.ts","state/actions/exchange.actions.ts","state/actions/wallet.actions.ts","containers/exchange/Exchange.component.tsx","components/WalletRow/WalletRow.component.tsx","containers/wallet/Wallet.component.tsx","state/helpers/next-currency.helper.ts","state/helpers/to-fixed.helper.ts","state/helpers/update-amounts.helper.ts","state/helpers/adjustment.helper.ts","state/reducers/exchange.reducer.ts","state/reducers/wallet.reducer.ts","utils/http.ts","api.ts","state/epics/exchange.epics.ts","state/epics/wallet.epics.ts","App.tsx","index.tsx"],"names":["Currency","ExchangeMode","Amount","history","Panel","styled","Paper","COLOR_PRIMARY","COLOR_BLUE_PRIMARY","COLOR_BLUE_SECCONDARY","WHITE","INPUT_UNDERLINE_COLOR","theme","createMuiTheme","palette","action","disabled","primary","main","overrides","MuiButton","root","fontSize","fontFamily","margin","outlinedPrimary","backgroundColor","border","color","containedPrimary","MuiTextField","display","marginBottom","MuiFab","height","position","width","zIndex","MuiInput","colorSecondary","underline","borderBottomColor","Title","h2","Container","BaseContainer","ButtonsWraper","div","getWalletState","state","wallet","getBalances","createSelector","balances","getCurrencies","currencies","getExchangeState","exchange","getMode","mode","getBaseAmount","baseAmount","getBaseCurrency","baseCurrency","getTargetAmount","targetAmount","getTargetCurrency","targetCurrency","getRate","rates","geterror","error","getErrorText","errorText","getTargets","targets","exchangeActions","init","createAction","changeMode","changeBaseCurrency","changeTargetCurrency","return","makeExchange","updateBaseAmount","updateTargetAmount","updateRates","walletActions","resetBalances","runExchange","updateBalances","Wrapper","form","Rate","Balance","Error","props","visible","Direction","Fab","Selector","TextField","Exchange","dispatch","useDispatch","useSelector","rate","useState","submitButtonLabel","setSubmitButtonLabel","useEffect","word","SELL","data-testid","autoComplete","id","label","style","flexGrow","value","onChange","event","target","test","baseBalance","targetBalance","select","selected","filter","item","map","option","index","MenuItem","onClick","ArrowDownwardRounded","ArrowUpwardRounded","marginTop","Button","variant","ExchangeButton","IconButton","WalletRow","balance","currency","onExchangeClick","SyncAlt","Balances","FullWidthButton","Wallet","nextCurrency","baseCurrencyIndex","findIndex","TypeError","toFixed","Math","round","updateAmountsOnInputChange","source","newBaseAmount","newTargetAmount","activeInput","match","BASE","toString","newTarget","newBase","adjustRates","forEach","initial","percentages","random","initialExchangeState","active","EUR","USD","exchangeReducer","createReducer","handleAction","payload","base","updateAmountsOnRatesChange","TARGET","BUY","initialBalances","GBP","PLN","initialWalletState","walletReducer","instance","Api","config","params","symbols","headers","axios","create","get","pipe","response","data","exchangeEpics","combineEpics","action$","state$","isActionOf","withLatestFrom","mapTo","push","switchMap","timer","i","walletEpics","actions$","newBaseBalance","newTargetBalance","epicMiddleware","createEpicMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createBrowserHistory","rootEpic","store","createStore","combineReducers","router","connectRouter","applyMiddleware","routerMiddleware","run","className","exact","path","component","to","ReactDOM","render","ThemeProvider","maxSnack","anchorOrigin","vertical","horizontal","document","getElementById"],"mappings":"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","file":"static/js/main.02523a65.chunk.js","sourcesContent":["export * from './currency'\r\nexport * from './exchange-mode'\r\nexport * from './exchange-rates'\r\nexport * from './amount-update.payload'\r\nexport * from './currency-change.payload'\r\nexport * from './rate-adjustment'\r\nexport * from './amount'","export enum Currency {\r\n  USD = 'USD',\r\n  EUR = 'EUR',\r\n  PLN = 'PLN',\r\n  GBP = 'GBP',\r\n}","export enum ExchangeMode {\r\n  SELL = 'Sell',\r\n  BUY = 'Buy'\r\n}","export enum Amount {\r\n  BASE = 'Base',\r\n  TARGET = 'Target'\r\n}","import { createBrowserHistory, History } from 'history'\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router'\r\nimport { combineEpics, createEpicMiddleware } from 'redux-observable'\r\nimport { combineReducers, compose, createStore, applyMiddleware } from 'redux'\r\n\r\nimport { exchangeReducer } from 'state/reducers/exchange.reducer'\r\nimport { walletReducer } from 'state/reducers/wallet.reducer'\r\nimport { exchangeEpics } from 'state/epics/exchange.epics'\r\nimport { walletEpics } from 'state/epics/wallet.epics'\r\n\r\ndeclare global {  \r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: <R>(a: R) => R\r\n  }\r\n}\r\n\r\nexport type RootState = NonNullable<Parameters<ReturnType<typeof makeRootReducer>>[0]>\r\n\r\nconst epicMiddleware = createEpicMiddleware()\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nexport const rootEpic = combineEpics(\r\n  exchangeEpics,\r\n  walletEpics,\r\n)\r\n\r\nexport const makeRootReducer = (history: History) => combineReducers({\r\n  router: connectRouter(history),\r\n  wallet: walletReducer,\r\n  exchange: exchangeReducer,\r\n})\r\n\r\nexport const store = createStore(\r\n  makeRootReducer(history),\r\n  composeEnhancers(\r\n   applyMiddleware(epicMiddleware, routerMiddleware(history)),\r\n  ),\r\n)\r\n\r\nepicMiddleware.run(rootEpic)","import { Paper } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\n\r\nexport const Panel = styled(Paper)`\r\n  box-shadow: 0px 2px 4px 2px lightblue !important;\r\n  margin: auto;\r\n  max-width: 400px;\r\n  min-width: 300px;\r\n  padding: 20px;\r\n`","import { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nexport const COLOR_PRIMARY = '#020941'\r\nexport const COLOR_BLUE_PRIMARY = '#2699fb'\r\nexport const COLOR_BLUE_SECCONDARY = '#84c6ff'\r\nconst WHITE = 'white'\r\nconst INPUT_UNDERLINE_COLOR = COLOR_BLUE_SECCONDARY\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    action: {\r\n      disabled: 'set color of text here',\r\n    },\r\n    primary: {\r\n      main: COLOR_PRIMARY,\r\n    },\r\n  },\r\n\r\n  overrides: {\r\n    MuiButton: {\r\n      root: {\r\n        fontSize: '1rem',\r\n        fontFamily: '\"Exo 2\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n        margin: '5px',\r\n      },\r\n      outlinedPrimary: {\r\n        backgroundColor: COLOR_PRIMARY,\r\n        border: `solid 2px ${COLOR_BLUE_PRIMARY}`,\r\n        color: WHITE,\r\n        '&:hover': {\r\n          backgroundColor: COLOR_PRIMARY,\r\n          border: `solid 2px ${COLOR_BLUE_SECCONDARY}`,\r\n        },\r\n      },\r\n      containedPrimary: {\r\n        backgroundColor: COLOR_BLUE_PRIMARY,\r\n        color: WHITE,\r\n        '&:hover': {\r\n          backgroundColor: COLOR_BLUE_SECCONDARY,\r\n        },\r\n      },\r\n    },\r\n\r\n    MuiTextField: {\r\n      root: {\r\n        display: 'flex',\r\n        marginBottom: '10px',\r\n      }\r\n    },\r\n\r\n    MuiFab: {\r\n      root: {\r\n        backgroundColor: 'aliceblue',\r\n        color: 'lightcoral',\r\n        height: '40px',\r\n        position: 'absolute',\r\n        width: '40px',\r\n        zIndex: 100,\r\n      }\r\n    },\r\n\r\n    MuiInput: {\r\n      colorSecondary: {\r\n        color: WHITE,\r\n      },\r\n\r\n      underline: {\r\n        borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n\r\n        '&:not($disabled):after': {\r\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n        },\r\n\r\n        '&:hover:not($disabled):after': {\r\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n        },\r\n\r\n        '&:not($disabled):before': {\r\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n        },\r\n\r\n        '&:hover:not($disabled):before': {\r\n          borderBottomColor: INPUT_UNDERLINE_COLOR,\r\n        },\r\n      },\r\n    },\r\n  },\r\n})\r\n","import styled from 'styled-components';\r\nimport { COLOR_BLUE_PRIMARY } from 'theme';\r\n\r\nexport const Title = styled.h2`\r\n  color: ${COLOR_BLUE_PRIMARY};\r\n  font-size: 1.8em;\r\n  margin: 0;\r\n  padding-bottom: 10px;\r\n  text-align: center;\r\n`","import styled from 'styled-components';\r\nimport { Container as BaseContainer} from '@material-ui/core';\r\n\r\nexport const Container = styled(BaseContainer)`\r\n    height: 100vh;\r\n    padding-top: 10vh;\r\n`","import styled from 'styled-components';\r\n\r\nexport const ButtonsWraper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 10px;\r\n  margin: 35px 0 5px;\r\n`\r\n","import { createSelector } from 'reselect'\r\n\r\nimport { WalletState } from 'state/reducers/wallet.reducer'\r\nimport { RootState } from 'store'\r\n\r\nconst getWalletState = (state: RootState): WalletState => state.wallet\r\n\r\nexport const getBalances = createSelector(getWalletState, (state) => state.balances)\r\nexport const getCurrencies = createSelector(getWalletState, (state) => state.currencies)","import { createSelector } from 'reselect'\r\n\r\nimport { ExchangeState } from 'state/reducers'\r\nimport { RootState } from 'store'\r\n\r\nconst getExchangeState = (state: RootState): ExchangeState => state.exchange\r\n\r\nexport const getMode = createSelector(getExchangeState, (state) => state.mode)\r\nexport const getBaseAmount = createSelector(getExchangeState, (state) => state.baseAmount)\r\nexport const getBaseCurrency = createSelector(getExchangeState, (state) => state.baseCurrency)\r\nexport const getTargetAmount = createSelector(getExchangeState, (state) => state.targetAmount)\r\nexport const getTargetCurrency = createSelector(getExchangeState, (state) => state.targetCurrency)\r\n\r\nexport const getRate = createSelector(getExchangeState, (state) => state.rates[state.targetCurrency])\r\nexport const geterror = createSelector(getExchangeState, (state) => state.error)\r\nexport const getErrorText = createSelector(getExchangeState, (state) => state.errorText)\r\nexport const getTargets = createSelector(getExchangeState, (state) => state.targets)\r\n","import { AmountUpdatePayload, Currency, ExchangeRates, CurrencyChangePayload, RateAdjustment } from 'state/models';\r\nimport { createAction } from \"typesafe-actions\";\r\n\r\nexport const exchangeActions = {\r\n  init: createAction('@exchange/init')<{ base: Currency, currencies: Currency[] }>(),\r\n  rates: createAction('@exchange/rates')<ExchangeRates>(),\r\n\r\n  changeMode: createAction('@exchange/changeMode')<void>(),\r\n  changeBaseCurrency: createAction('@exchange/changeBaseCurrency')<CurrencyChangePayload>(),\r\n  changeTargetCurrency: createAction('@exchange/changeTargetCurrency')<CurrencyChangePayload>(),\r\n  \r\n  return: createAction('@exchange/return')<void>(),\r\n  makeExchange: createAction('@exchange/makeExchange')<void>(),\r\n  \r\n  updateBaseAmount: createAction('@exchange/updateBaseAmount')<AmountUpdatePayload>(),\r\n  updateTargetAmount: createAction('@exchange/updateTargetAmount')<AmountUpdatePayload>(),\r\n\r\n  updateRates: createAction('@exchange/updateRates')<RateAdjustment>(),\r\n}\r\n","import { createAction } from 'typesafe-actions'\r\n\r\nimport { Currency } from 'state/models'\r\n\r\nexport const walletActions = {\r\n  resetBalances: createAction('@wallet/resetBalances')<void>(),\r\n  runExchange: createAction('@wallet/runExchange')<Currency>(),\r\n  updateBalances: createAction('@wallet/updateBalances')<Record<Currency, number>>(),\r\n}\r\n","\r\n//#region Imports\r\nimport styled from 'styled-components'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Fab, MenuItem, TextField } from '@material-ui/core'\r\nimport { ArrowUpwardRounded, ArrowDownwardRounded } from '@material-ui/icons'\r\n\r\nimport { ButtonsWraper, Title } from 'shared/components'\r\n\r\nimport { getBalances, getBaseAmount, getBaseCurrency, getErrorText, geterror, getMode, getRate, getTargetAmount, getTargetCurrency, getTargets, getCurrencies } from 'state/selectors'\r\nimport { Currency, ExchangeMode } from 'state/models'\r\nimport { exchangeActions } from 'state/actions'\r\n\r\nexport const componentId = 'Exchange'\r\n//#endregion\r\n//#region Styles\r\nconst Wrapper = styled.form`\r\n  position: relative;\r\n`\r\nconst Rate = styled.div`\r\n  color: lightcoral;\r\n  display: flex;\r\n  font-weight: 600;\r\n  justify-content: center;\r\n  margin-top: -10px;\r\n`\r\nconst Amount = styled.div`\r\n  display: flex;\r\n`\r\nconst Balance = styled.div`\r\n  color: lightcoral;\r\n  display: flex;\r\n  font-size: 12px;\r\n  justify-content: flex-end;\r\n  position: relative;\r\n  right: 0px;\r\n  top: -8px;\r\n  width: 100%;\r\n`\r\nconst Error = styled.div<{visible: boolean}>` \r\n  color: red;\r\n  display: ${props => props.visible ? 'flex' : 'none'};\r\n  justify-content: center;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  position: absolute;\r\n  width: 100%;\r\n`\r\nconst Direction = styled(Fab)`\r\n  top: 127px;\r\n  left: 175px;\r\n`\r\nconst Selector = styled(TextField)`\r\n  justify-content: flex-end;\r\n  overflow: hidden;\r\n  width: 25px;\r\n\r\n`\r\n//#endregion\r\n\r\nexport type ExchangeProps = { }\r\n\r\nexport const Exchange: React.FC<ExchangeProps> = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const balances = useSelector(getBalances)\r\n  const baseAmount = useSelector(getBaseAmount)\r\n  const baseCurrency = useSelector(getBaseCurrency)\r\n  const currencies = useSelector(getCurrencies)\r\n  const errorText = useSelector(getErrorText)\r\n  const error = useSelector(geterror)\r\n  const mode = useSelector(getMode)\r\n  const rate = useSelector(getRate)\r\n  const targets = useSelector(getTargets)\r\n  const targetAmount = useSelector(getTargetAmount)\r\n  const targetCurrency = useSelector(getTargetCurrency)\r\n\r\n  const [submitButtonLabel, setSubmitButtonLabel] = useState('')\r\n\r\n  useEffect(() => {\r\n    const word = mode === ExchangeMode.SELL ? 'for' : 'with'\r\n    \r\n    setSubmitButtonLabel(`${mode} ${baseCurrency} ${word} ${targetCurrency}`)\r\n  }, [mode, baseCurrency, targetCurrency])\r\n\r\n  const handleBaseCurrensyChange = (event: React.ChangeEvent<HTMLInputElement>): void => { \r\n    dispatch(exchangeActions.changeBaseCurrency({\r\n      selected: event.target.value as Currency,\r\n      currencies\r\n    }))\r\n  }\r\n  const handleTargetCurrensyChange  = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    dispatch(exchangeActions.changeTargetCurrency({\r\n      selected: event.target.value as Currency,\r\n      currencies, \r\n    }))\r\n  }\r\n  const handleBaseAmountChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (!event.target.value || /^\\d+(\\.([0-9]([0-9])?)?)?$/.test(event.target.value)) {\r\n      dispatch(exchangeActions.updateBaseAmount({\r\n        value: event.target.value, \r\n        baseBalance: balances[baseCurrency],\r\n        targetBalance: balances[targetCurrency],\r\n      }))\r\n    }\r\n  }\r\n  const handleTargetAmountChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (!event.target.value || /^\\d+(\\.([0-9]([0-9])?)?)?$/.test(event.target.value)) {\r\n      dispatch(exchangeActions.updateTargetAmount({\r\n        value: event.target.value, \r\n        baseBalance: balances[baseCurrency],\r\n        targetBalance: balances[targetCurrency],\r\n      }))\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <Wrapper data-testid={componentId} autoComplete=\"off\">\r\n      <Title data-testid=\"Title\"> {mode} {baseCurrency}</Title>\r\n\r\n      <Rate data-testid=\"Rate\"> 1 {baseCurrency} = {rate} {targetCurrency}</Rate>\r\n\r\n      <Amount>\r\n        <TextField\r\n          data-testid=\"baseAmount\"\r\n          id=\"baseAmount\"\r\n          label={baseCurrency}\r\n          style={{flexGrow: 1}}\r\n          value={baseAmount}\r\n          onChange={handleBaseAmountChange}\r\n        />\r\n\r\n        <Selector\r\n          id=\"standard-select-currency\"\r\n          select\r\n          value={''}\r\n          onChange={handleBaseCurrensyChange}\r\n        >\r\n          {targets.filter((item => item !== baseCurrency)).map((option, index) => (\r\n            <MenuItem key={index} value={option}>\r\n              {option}\r\n            </MenuItem>\r\n          ))}\r\n        </Selector>\r\n      </Amount>\r\n\r\n      <Balance>Balance: {balances[baseCurrency]} {baseCurrency}</Balance>\r\n\r\n      <Direction onClick={() => dispatch(exchangeActions.changeMode())}>\r\n        {mode === ExchangeMode.SELL \r\n          ? <ArrowDownwardRounded />\r\n          : <ArrowUpwardRounded />\r\n        }\r\n      </Direction>\r\n\r\n      <Amount>\r\n        <TextField\r\n          data-testid=\"targetAmount\"\r\n          id=\"targetAmount\"\r\n          label={targetCurrency}\r\n          value={targetAmount}\r\n          style={{flexGrow: 1, marginTop: '15px'}}\r\n          onChange={handleTargetAmountChange}\r\n        />\r\n\r\n        <Selector\r\n          id=\"standard-select-currency\"\r\n          select\r\n          value={''}\r\n          onChange={handleTargetCurrensyChange}\r\n        >\r\n          {targets.filter((item => item !== targetCurrency)).map((option, index) => (\r\n            <MenuItem key={index} value={option}>\r\n              {option}\r\n            </MenuItem>\r\n          ))}\r\n        </Selector>\r\n      </Amount>\r\n\r\n      <Balance>Balance: {balances[targetCurrency]} {targetCurrency}</Balance>\r\n\r\n      <Error visible={error}>{errorText}</Error>\r\n\r\n      <ButtonsWraper>\r\n        <Button\r\n          color=\"primary\"\r\n          data-testid=\"ReturnButton\"\r\n          onClick={() => dispatch(exchangeActions.return())}\r\n          variant=\"contained\"\r\n        >\r\n          Return\r\n        </Button>\r\n\r\n        <Button\r\n          color=\"primary\"\r\n          data-testid=\"SubmitButton\"\r\n          disabled={error}\r\n          onClick={() => dispatch(exchangeActions.makeExchange())}\r\n          style={{'flexGrow': 1}}\r\n          variant=\"contained\"\r\n        >\r\n          {submitButtonLabel}\r\n        </Button>\r\n      </ButtonsWraper>\r\n    </Wrapper>\r\n  )\r\n};\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { SyncAlt } from '@material-ui/icons'\r\nimport { IconButton } from '@material-ui/core'\r\n\r\nimport { Currency } from 'state/models/currency'\r\n//#region Styles\r\nconst ExchangeButton = styled(IconButton)`\r\n  color: lightcoral !important;\r\n  position: relative;\r\n  top: -3px;\r\n`\r\nconst Wrapper = styled.div` \r\n  font-size: 20px;\r\n  margin: 0 10px;\r\n`\r\n//#endregion\r\nexport const componentId = 'WalletRow'\r\n\r\nexport type WalletRowProps = { \r\n  balance: number,\r\n  currency: Currency,\r\n  onExchangeClick: () => void,\r\n}\r\n\r\nexport const WalletRow: React.FC<WalletRowProps> = ({ \r\n  balance,\r\n  currency, \r\n  onExchangeClick \r\n}) => {\r\n\r\n  return (\r\n    <Wrapper data-testid={componentId}>\r\n      <ExchangeButton  data-testid=\"ExchangeButton\" onClick={onExchangeClick}>\r\n        <SyncAlt />\r\n      </ExchangeButton>\r\n\r\n      <span data-testid=\"Balance\">\r\n        <b data-testid=\"Currency\">{currency}</b> {balance}\r\n      </span>\r\n    </Wrapper>\r\n  )\r\n};","//#region Imports\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button } from '@material-ui/core'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getBalances, getCurrencies } from 'state/selectors'\r\nimport { ButtonsWraper, Title } from 'shared/components'\r\nimport { walletActions } from 'state/actions/wallet.actions'\r\nimport { WalletRow } from 'components'\r\n\r\nexport const componentId = 'Wallet'\r\nexport const componentTitle = 'Balances'\r\n//#endregion\r\n//#region Styles\r\nconst Balances = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: -30px;\r\n`\r\n\r\nconst FullWidthButton = styled(Button)`\r\n  width: 100%;\r\n`\r\n//#endregion\r\n\r\nexport type WalletProps = { }\r\n\r\nexport const Wallet: React.FC<WalletProps> = () => {\r\n  const dispatch = useDispatch()\r\n  const balances = useSelector(getBalances)\r\n  const currencies = useSelector(getCurrencies)\r\n\r\n  return (\r\n    <div data-testid={componentId}>\r\n      <Title data-testid=\"Title\"> {componentTitle} </Title>\r\n\r\n      <Balances data-testid=\"Balances\">\r\n        {currencies.map((currency, index) => (\r\n          <WalletRow \r\n            key={index}\r\n            balance={balances[currency]}\r\n            currency={currency}  \r\n            onExchangeClick={() => dispatch(walletActions.runExchange(currency))}\r\n          />\r\n        ))}\r\n      </Balances>\r\n\r\n      <ButtonsWraper>\r\n        <FullWidthButton\r\n          data-testid=\"ResetButton\"\r\n          onClick={() => dispatch(walletActions.resetBalances())}\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n        >\r\n          Reset balances to initial state\r\n        </FullWidthButton>\r\n      </ButtonsWraper>\r\n    </div>\r\n  )\r\n};","import { Currency } from 'state/models';\r\n\r\nexport const nextCurrency = (baseCurrency: Currency, currencies: Currency[]): Currency | void => {\r\n  const baseCurrencyIndex = currencies.findIndex((item) => item === baseCurrency);\r\n\r\n  if (baseCurrencyIndex < 0) {\r\n    throw new TypeError('Base currency is not in the list')\r\n  }\r\n\r\n  return baseCurrencyIndex === 0 ? currencies[1] : currencies[0] \r\n}\r\n","export const toFixed = (value: number | string): number => {\r\n  \r\n  return (Math.round(+value * 100)/100)\r\n}","import { Amount, AmountUpdatePayload, ExchangeMode, ExchangeRates } from 'state/models';\r\nimport { ExchangeState } from 'state/reducers';\r\nimport { toFixed } from 'state/helpers';\r\n\r\nexport const updateAmountsOnInputChange = (\r\n  { baseAmount, targetAmount, baseCurrency, targetCurrency, mode, rates }: ExchangeState,\r\n  { baseBalance, targetBalance, value }: AmountUpdatePayload,\r\n  source: Amount,\r\n): Partial<ExchangeState> => {\r\n  \r\n  let activeInput: Amount | null = null\r\n  let error: boolean\r\n  let newBaseAmount: string\r\n  let newTargetAmount: string\r\n  let errorText = ''\r\n  \r\n  if (value.match(/^\\d+\\.$/g)) {\r\n    error = true\r\n    newBaseAmount = source === Amount.BASE ? value : baseAmount\r\n    newTargetAmount = source === Amount.BASE ? targetAmount : value\r\n  } else if (value === '') {\r\n    error = true\r\n    newBaseAmount = ''\r\n    newTargetAmount = ''\r\n  } else {\r\n    activeInput = source\r\n    \r\n    if (source === Amount.BASE) { \r\n      if (mode === ExchangeMode.SELL) {\r\n        error = +value > baseBalance\r\n        errorText = `Insufficient ${baseCurrency} balance`\r\n        newBaseAmount = value\r\n        newTargetAmount = toFixed(+value * rates[targetCurrency]).toString()\r\n      } else {\r\n        const newTarget = toFixed(+value * rates[targetCurrency])\r\n\r\n        error = newTarget > targetBalance\r\n        errorText = `Insufficient ${targetCurrency} balance`\r\n        newBaseAmount = value\r\n        newTargetAmount = newTarget.toString()\r\n      }\r\n    } else {\r\n      if (mode === ExchangeMode.SELL) {\r\n        const newBase = toFixed(+value / rates[targetCurrency])\r\n\r\n        error = newBase > baseBalance\r\n        errorText = `Insufficient ${baseCurrency} balance`\r\n        newBaseAmount = newBase.toString()\r\n        newTargetAmount = value\r\n      } else {\r\n        error = +value > targetBalance\r\n        errorText = `Insufficient ${targetCurrency} balance`\r\n        newBaseAmount = toFixed(+value / rates[targetCurrency]).toString()\r\n        newTargetAmount = value\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    activeInput,\r\n    baseAmount: newBaseAmount,\r\n    targetAmount: newTargetAmount,\r\n    error,\r\n    errorText,\r\n  }\r\n}\r\n\r\nexport const updateAmountsOnRatesChange = (\r\n  { baseAmount, targetAmount, baseCurrency, targetCurrency, mode, activeInput }: ExchangeState,\r\n  { rates, balances }: ExchangeRates,\r\n): Partial<ExchangeState> => {\r\n  let error: boolean\r\n  let newBaseAmount: string\r\n  let newTargetAmount: string\r\n  let errorText = ''\r\n\r\n  if (!activeInput) {\r\n    return {\r\n      rates\r\n    }\r\n  }\r\n\r\n  if (activeInput === Amount.BASE) {\r\n    if (mode === ExchangeMode.SELL) {\r\n      error = +baseAmount > balances[baseCurrency]\r\n      errorText = `Insufficient ${baseCurrency} balance`\r\n      newBaseAmount = baseAmount\r\n      newTargetAmount = toFixed(+baseAmount * rates[targetCurrency]).toString()\r\n    } else {\r\n      const newTarget = toFixed(+baseAmount * rates[targetCurrency])\r\n\r\n      error = newTarget > balances[targetCurrency]\r\n      errorText = `Insufficient ${targetCurrency} balance`\r\n      newBaseAmount = baseAmount\r\n      newTargetAmount = newTarget.toString()\r\n    }\r\n  } else {\r\n    if (mode === ExchangeMode.SELL) {\r\n      const newBase = toFixed(+targetAmount / rates[targetCurrency])\r\n\r\n      error = newBase > balances[baseCurrency]\r\n      errorText = `Insufficient ${baseCurrency} balance`\r\n      newBaseAmount = newBase.toString()\r\n      newTargetAmount = targetAmount\r\n    } else {\r\n      error = +targetAmount > balances[targetCurrency]\r\n      errorText = `Insufficient ${targetCurrency} balance`\r\n      newBaseAmount = toFixed(+targetAmount / rates[targetCurrency]).toString()\r\n      newTargetAmount = targetAmount\r\n    }\r\n  }\r\n\r\n  return {\r\n    baseAmount: newBaseAmount,\r\n    targetAmount: newTargetAmount,\r\n    error,\r\n    errorText,\r\n    rates,\r\n  }\r\n}\r\n","import { Currency } from 'state/models';\r\n\r\nconst adjust = (initial: number, percentages: number) => \r\n +(initial * percentages / 100).toFixed(5)\r\n\r\nexport const adjustRates = (\r\n  baseCurrency: Currency,\r\n  currencies: Currency[],\r\n  rates: Record<Currency, number>, \r\n  index: number,\r\n): Record<Currency, number> => {\r\n  currencies.forEach((currency) => {\r\n    if (currency !== baseCurrency) {\r\n      rates[currency] = adjust(\r\n        rates[currency],\r\n        index % 2 === 0 \r\n          ? 100 - +Math.random().toFixed(2)\r\n          : 100 + +Math.random().toFixed(2),\r\n      )\r\n    }\r\n  })\r\n  \r\n  return rates\r\n}","import { ActionType, createReducer } from 'typesafe-actions'\r\n\r\nimport { nextCurrency, updateAmountsOnInputChange, updateAmountsOnRatesChange } from 'state/helpers'\r\nimport { walletActions, exchangeActions } from 'state/actions'\r\nimport { Amount, Currency, ExchangeMode } from 'state/models'\r\n\r\ntype Action = ActionType<typeof walletActions & typeof exchangeActions>\r\n\r\nexport type ExchangeState = {\r\n  active: boolean,\r\n  activeInput: Amount | null,\r\n  baseAmount: string,\r\n  baseCurrency: Currency,\r\n  error: boolean,\r\n  errorText: string,\r\n  mode: ExchangeMode,\r\n  rates: Record<Currency, number>,\r\n  targetAmount: string,\r\n  targetCurrency: Currency,\r\n  targets: Currency[],\r\n}\r\n\r\nexport const initialExchangeState: ExchangeState = {\r\n  active: false,\r\n  activeInput: null,\r\n  baseAmount: '',\r\n  baseCurrency: Currency.EUR,\r\n  error: true,\r\n  errorText: '',\r\n  mode: ExchangeMode.SELL,\r\n  rates: {} as Record<Currency, number>,\r\n  targetAmount: '',\r\n  targetCurrency: Currency.USD,\r\n  targets: [],\r\n}\r\n\r\nexport const exchangeReducer = createReducer<ExchangeState, Action>(\r\n  initialExchangeState\r\n)\r\n//#region Exchange actions\r\n  .handleAction(exchangeActions.init, (state, { payload }) => ({\r\n    ...state,\r\n    active: true,\r\n    baseCurrency: payload.base,\r\n    targetCurrency: nextCurrency(payload.base, payload.currencies) || payload.currencies[0],\r\n    targets: payload.currencies,\r\n  }))\r\n\r\n  .handleAction(exchangeActions.return, () => initialExchangeState)\r\n\r\n  .handleAction(exchangeActions.rates, (state, { payload }) => ({\r\n    ...state,\r\n    ...updateAmountsOnRatesChange(state, payload),\r\n  }))\r\n\r\n  .handleAction(exchangeActions.updateBaseAmount, (state, { payload }) => ({\r\n    ...state,\r\n    ...updateAmountsOnInputChange(state, payload, Amount.BASE),\r\n  }))\r\n\r\n  .handleAction(exchangeActions.updateTargetAmount, (state, { payload }) => ({\r\n    ...state,\r\n    ...updateAmountsOnInputChange(state, payload, Amount.TARGET),\r\n  }))\r\n\r\n  .handleAction(exchangeActions.changeMode, (state) => ({\r\n    ...state,\r\n    activeInput: null,\r\n    baseAmount: '',\r\n    error: true,\r\n    errorText: '',\r\n    mode: state.mode === ExchangeMode.BUY ? ExchangeMode.SELL : ExchangeMode.BUY,\r\n    targetAmount: '',\r\n  }))\r\n\r\n  .handleAction(exchangeActions.makeExchange, (state) => ({\r\n    ...state,\r\n    activeInput: null,\r\n    error: true,\r\n    errorText: '',\r\n  }))\r\n\r\n  .handleAction(exchangeActions.changeBaseCurrency, (state, { payload }) => ({\r\n    ...state,\r\n    activeInput: null,\r\n    baseCurrency: payload.selected,\r\n    targetCurrency: payload.selected === state.targetCurrency \r\n      ? nextCurrency(payload.selected, payload.currencies) || payload.currencies[0]\r\n      : state.targetCurrency,\r\n    targets: payload.currencies,\r\n    baseAmount: '',\r\n    error: true,\r\n    errorText: '',\r\n    targetAmount: '',\r\n  }))\r\n\r\n  .handleAction(exchangeActions.changeTargetCurrency, (state, { payload }) => ({\r\n    ...state,\r\n    activeInput: null,\r\n    baseCurrency: payload.selected === state.baseCurrency \r\n      ? nextCurrency(payload.selected, payload.currencies) || payload.currencies[0] \r\n      : state.baseCurrency,\r\n    targetCurrency: payload.selected,\r\n    targets: payload.currencies,\r\n    baseAmount: '',\r\n    error: true,\r\n    errorText: '',\r\n    targetAmount: '',\r\n  }))\r\n//#endregion\r\n//#region Wallet actions  \r\n  .handleAction(walletActions.updateBalances, (state) => ({\r\n    ...state,\r\n    baseAmount: '',\r\n    targetAmount: '',\r\n  }))\r\n//#endregion","import { ActionType, createReducer } from 'typesafe-actions'\r\n\r\nimport { walletActions, exchangeActions } from 'state/actions'\r\nimport { Currency } from 'state/models'\r\n\r\ntype Action = ActionType<typeof walletActions & typeof exchangeActions>\r\n\r\nexport type WalletState = {\r\n  balances: Record<Currency, number>,\r\n  currencies: Currency[],\r\n}\r\n\r\nexport const initialBalances: Record<Currency, number> = {\r\n  [Currency.USD]: 100,\r\n  [Currency.EUR]: 200,\r\n  [Currency.GBP]: 300,\r\n  [Currency.PLN]: 400,\r\n\r\n}\r\n\r\nexport const initialWalletState: WalletState = {\r\n  balances: initialBalances,\r\n  currencies: [Currency.USD, Currency.EUR, Currency.GBP, Currency.PLN],\r\n}\r\n\r\nexport const walletReducer = createReducer<WalletState, Action>(\r\n  initialWalletState\r\n)\r\n  .handleAction(walletActions.resetBalances, (state) => ({\r\n    ...state,\r\n    balances: { ...initialBalances },\r\n  }))\r\n\r\n  .handleAction(walletActions.updateBalances, (state, { payload }) => ({\r\n    ...state,\r\n    balances: payload,\r\n  }))","import { AxiosRequestConfig, AxiosResponse } from 'axios'\r\nimport axios, { Axios } from 'axios-observable'\r\nimport { map } from 'rxjs/operators'\r\n\r\n\r\nlet instance: Axios | null = null\r\n\r\nexport interface RequestConfig extends AxiosRequestConfig {\r\n  context?: {\r\n    noBasicHeaders?: boolean\r\n  },\r\n  params: any,\r\n  headers: any,\r\n}\r\n\r\nexport const http = (): Axios => {\r\n  if (!instance) {\r\n    instance = axios.create({})\r\n  }\r\n\r\n  return instance\r\n}\r\n\r\nexport const getHTTPData = <T>() => map((response: AxiosResponse<T>) => response.data)\r\n","import { of } from 'rxjs'\r\nimport { map } from 'rxjs/operators'\r\n\r\nimport { Currency, ExchangeRates } from 'state/models'\r\n\r\nimport { getHTTPData, http, RequestConfig, mockedRates } from 'utils'\r\n\r\nconst useApiMock = false\r\n\r\nexport const Api = {\r\n  getRates(baseCurrency: Currency) {\r\n    const url = 'https://data.fixer.io/api/latest?access_key=4e8faff8b19cdd9877d40145e04b7148'\r\n    const config: RequestConfig = {\r\n      params: {\r\n        symbols: 'USD,PLN,GBP,EUR',\r\n        base: baseCurrency,\r\n      },\r\n      headers: {}\r\n    }\r\n\r\n    if (useApiMock) {\r\n      return of({ \r\n        base: mockedRates.data.base,\r\n        rates: mockedRates.data.rates,\r\n      })\r\n    }\r\n\r\n    return http()\r\n      .get<ExchangeRates>(url, config)\r\n      .pipe(\r\n        getHTTPData(),\r\n        map(({ base, rates }) => ({base, rates})),\r\n      )\r\n  },\r\n}\r\n","import { push } from 'connected-react-router'\r\nimport { combineEpics, Epic } from 'redux-observable'\r\nimport { timer, Observable } from 'rxjs'\r\nimport { ActionType, isActionOf } from 'typesafe-actions'\r\nimport { filter, mapTo, map, switchMap, withLatestFrom } from 'rxjs/operators'\r\n\r\nimport { exchangeActions, walletActions } from 'state/actions'\r\nimport { getBalances, getBaseCurrency, getCurrencies } from 'state/selectors'\r\nimport { adjustRates } from 'state/helpers'\r\nimport { RootState } from 'store'\r\nimport { Api } from 'api'\r\n\r\ntype Actions = ActionType<typeof exchangeActions & typeof walletActions>\r\n\r\nconst initExchangePage$: Epic = (\r\n  action$: Observable<Actions>, \r\n  state$: Observable<RootState>,\r\n) =>\r\n  action$.pipe(\r\n    filter(isActionOf(walletActions.runExchange)),\r\n    withLatestFrom(state$.pipe(map(state => getCurrencies(state)))),\r\n    map(([{ payload }, currencies]) => exchangeActions.init({ base: payload, currencies })),\r\n  )\r\n\r\nconst getRates$: Epic = (\r\n  action$: Observable<Actions>, \r\n  state$: Observable<RootState>,\r\n) =>\r\n  action$.pipe(\r\n    filter(isActionOf(exchangeActions.init)),\r\n    switchMap(() => \r\n      timer(0, 5000).pipe(\r\n        withLatestFrom(\r\n          state$.pipe(map(state => getBaseCurrency(state))),\r\n          state$.pipe(map(state => getCurrencies(state))),\r\n          state$.pipe(map(state => getBalances(state))),\r\n          state$.pipe(map(state => state.exchange.active)),\r\n\r\n        ),\r\n        filter(([, , , , isActive]) => isActive),\r\n        switchMap(([i, baseCurrency, currencies, balances]) => Api.getRates(baseCurrency).pipe(\r\n          map((data: any) => exchangeActions.rates({\r\n            ...data,\r\n            rates: adjustRates(baseCurrency, currencies, data.rates, i),\r\n            balances,\r\n          }))\r\n        ))\r\n      ),\r\n    )\r\n  )\r\n\r\nconst closeExchangePage$: Epic = (action$: Observable<Actions>) =>\r\n  action$.pipe(\r\n    filter(isActionOf(exchangeActions.return)),\r\n    mapTo(push('/balances')),\r\n  )\r\n\r\nexport const exchangeEpics: Epic = combineEpics(\r\n  initExchangePage$,\r\n  closeExchangePage$,\r\n  getRates$,\r\n)\r\n","import { push } from 'connected-react-router'\r\nimport { Observable } from 'rxjs'\r\nimport { combineEpics, Epic } from 'redux-observable'\r\nimport { ActionType, isActionOf } from 'typesafe-actions'\r\nimport { filter, map, mapTo, withLatestFrom } from 'rxjs/operators'\r\n\r\nimport { exchangeActions, walletActions } from 'state/actions'\r\nimport { ExchangeMode } from 'state/models'\r\nimport { RootState } from 'store'\r\nimport { toFixed } from 'state/helpers'\r\n\r\ntype Actions = ActionType<typeof walletActions & typeof exchangeActions>\r\n\r\nconst openExchangeView$: Epic = (\r\n  actions$: Observable<Actions>,\r\n) =>\r\n  actions$.pipe(\r\n    filter(isActionOf(walletActions.runExchange)),\r\n    mapTo(push('/currency')),\r\n  )\r\n\r\nconst makeExchange$: Epic = (\r\n  actions$: Observable<Actions>,\r\n  state$: Observable<RootState>,\r\n) => \r\n  actions$.pipe(\r\n    filter(isActionOf(exchangeActions.makeExchange)),\r\n    withLatestFrom(\r\n      state$.pipe(map(state => state.wallet)), \r\n      state$.pipe(map(state => state.exchange))\r\n    ),\r\n    map(([, { balances },  exchange]) => {\r\n      let newBaseBalance, newTargetBalance  \r\n      \r\n      if (exchange.mode === ExchangeMode.BUY) {\r\n        newBaseBalance = toFixed(balances[exchange.baseCurrency] + +exchange.baseAmount)\r\n        newTargetBalance = toFixed(balances[exchange.targetCurrency] - +exchange.targetAmount)\r\n      } else {\r\n        newBaseBalance = toFixed(balances[exchange.baseCurrency] - +exchange.baseAmount)\r\n        newTargetBalance = toFixed(balances[exchange.targetCurrency] + +exchange.targetAmount)\r\n      }\r\n\r\n      return walletActions.updateBalances({\r\n        ...balances,\r\n        [exchange.baseCurrency]: newBaseBalance,\r\n        [exchange.targetCurrency]: newTargetBalance,\r\n      })\r\n    })\r\n  )\r\n\r\nexport const walletEpics: Epic = combineEpics(\r\n  openExchangeView$,\r\n  makeExchange$,\r\n)","import styled from 'styled-components';\r\nimport { Provider } from 'react-redux'\r\nimport { ConnectedRouter } from 'connected-react-router'\r\nimport { Route, Router, Redirect, Switch } from 'react-router-dom'\r\n\r\nimport { Exchange, Wallet } from 'containers';\r\nimport { Container, Panel } from 'shared/components';\r\nimport { store, history } from 'store'\r\n\r\nfunction App({className}: {className?: string}) {\r\n  return (\r\n    <div className={className}>\r\n      <Provider store={store}>\r\n        <Container>\r\n          <Panel>\r\n            <ConnectedRouter history={history}>\r\n              <Router history={history}>\r\n                <Switch>\r\n                  <Route exact={true} path=\"/balances\" component={Wallet} />\r\n                  <Route exact={true} path=\"/currency\" component={Exchange} />\r\n                  <Route>\r\n                    <Redirect to=\"/balances\" />\r\n                  </Route>\r\n                </Switch>\r\n              </Router>\r\n            </ConnectedRouter>\r\n          </Panel>\r\n        </Container>\r\n      </Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default styled(App)`\r\n  background-color: aliceblue;\r\n  height: 100vh;\r\n`;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { ThemeProvider } from '@material-ui/core'\r\nimport { SnackbarProvider } from 'notistack'\r\n\r\nimport App from 'App'\r\nimport { theme } from 'theme'\r\nimport 'index.css'\r\n\r\nReactDOM.render(\r\n  <ThemeProvider theme={theme}>\r\n    <SnackbarProvider maxSnack={5} anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}>\r\n      <App />\r\n    </SnackbarProvider>\r\n  </ThemeProvider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}